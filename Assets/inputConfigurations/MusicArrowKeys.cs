//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/inputConfigurations/MusicArrowKeys.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MusicArrowKey : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MusicArrowKey()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MusicArrowKeys"",
    ""maps"": [
        {
            ""name"": ""MusicArrowKeys"",
            ""id"": ""b03e94e6-4708-4e83-8ee2-b5400145c807"",
            ""actions"": [
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""d8297ead-cf16-4ea2-9f97-42182eb84977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""7ab49f1e-f576-44d5-920b-95375d6b6456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""0a6acc03-e4af-49bb-bc9f-ade6fd4bb23e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""6e5013fa-a65d-403e-b16d-abfd275621c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b009a468-07e4-4a3e-b933-86546292dbdd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""049a1f5e-e303-4044-93ac-a9f74d7e2483"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59819868-8d0e-412a-979a-7fc53dfadd16"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09564fc5-7b1b-451c-bed0-e26e622a139c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MusicArrowKeys
        m_MusicArrowKeys = asset.FindActionMap("MusicArrowKeys", throwIfNotFound: true);
        m_MusicArrowKeys_DownArrow = m_MusicArrowKeys.FindAction("DownArrow", throwIfNotFound: true);
        m_MusicArrowKeys_UpArrow = m_MusicArrowKeys.FindAction("UpArrow", throwIfNotFound: true);
        m_MusicArrowKeys_RightArrow = m_MusicArrowKeys.FindAction("RightArrow", throwIfNotFound: true);
        m_MusicArrowKeys_LeftArrow = m_MusicArrowKeys.FindAction("LeftArrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MusicArrowKeys
    private readonly InputActionMap m_MusicArrowKeys;
    private IMusicArrowKeysActions m_MusicArrowKeysActionsCallbackInterface;
    private readonly InputAction m_MusicArrowKeys_DownArrow;
    private readonly InputAction m_MusicArrowKeys_UpArrow;
    private readonly InputAction m_MusicArrowKeys_RightArrow;
    private readonly InputAction m_MusicArrowKeys_LeftArrow;
    public struct MusicArrowKeysActions
    {
        private @MusicArrowKey m_Wrapper;
        public MusicArrowKeysActions(@MusicArrowKey wrapper) { m_Wrapper = wrapper; }
        public InputAction @DownArrow => m_Wrapper.m_MusicArrowKeys_DownArrow;
        public InputAction @UpArrow => m_Wrapper.m_MusicArrowKeys_UpArrow;
        public InputAction @RightArrow => m_Wrapper.m_MusicArrowKeys_RightArrow;
        public InputAction @LeftArrow => m_Wrapper.m_MusicArrowKeys_LeftArrow;
        public InputActionMap Get() { return m_Wrapper.m_MusicArrowKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MusicArrowKeysActions set) { return set.Get(); }
        public void SetCallbacks(IMusicArrowKeysActions instance)
        {
            if (m_Wrapper.m_MusicArrowKeysActionsCallbackInterface != null)
            {
                @DownArrow.started -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnDownArrow;
                @DownArrow.performed -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnDownArrow;
                @DownArrow.canceled -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnDownArrow;
                @UpArrow.started -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnUpArrow;
                @UpArrow.performed -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnUpArrow;
                @UpArrow.canceled -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnUpArrow;
                @RightArrow.started -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnRightArrow;
                @RightArrow.performed -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnRightArrow;
                @RightArrow.canceled -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnRightArrow;
                @LeftArrow.started -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnLeftArrow;
                @LeftArrow.performed -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnLeftArrow;
                @LeftArrow.canceled -= m_Wrapper.m_MusicArrowKeysActionsCallbackInterface.OnLeftArrow;
            }
            m_Wrapper.m_MusicArrowKeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DownArrow.started += instance.OnDownArrow;
                @DownArrow.performed += instance.OnDownArrow;
                @DownArrow.canceled += instance.OnDownArrow;
                @UpArrow.started += instance.OnUpArrow;
                @UpArrow.performed += instance.OnUpArrow;
                @UpArrow.canceled += instance.OnUpArrow;
                @RightArrow.started += instance.OnRightArrow;
                @RightArrow.performed += instance.OnRightArrow;
                @RightArrow.canceled += instance.OnRightArrow;
                @LeftArrow.started += instance.OnLeftArrow;
                @LeftArrow.performed += instance.OnLeftArrow;
                @LeftArrow.canceled += instance.OnLeftArrow;
            }
        }
    }
    public MusicArrowKeysActions @MusicArrowKeys => new MusicArrowKeysActions(this);
    public interface IMusicArrowKeysActions
    {
        void OnDownArrow(InputAction.CallbackContext context);
        void OnUpArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
    }
}
